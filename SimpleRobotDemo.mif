-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28FA;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A7B;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 10FD;  -- 	STORE  DVel        ; Reset API variables
           009 : 10FC;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8263;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 8245;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A8A;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A87;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A87;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 1279;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 5279;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A88;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A7B;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           024 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           025 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           026 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           027 : 0A86;  -- 	LOAD MASK0 			;loads sensor 0
           028 : 5288;  -- 	OR MASK2 			;loads sensor 2
           029 : 5289;  -- 	OR MASK3 			;loads sensor 3
           02A : 528B;  -- 	OR MASK5 			;loads sensor 5
           02B : 98B2;  -- 	OUT SONAREN 		;enables sonar sensors 0,2,3,5
           02C : 0A9E;  -- 	LOAD FMid			;loads medium forward velocity
           02D : 10FD;  -- 	STORE DVel			;sets forward speed
           02E : 90C1;  -- 	IN YPOS				;reads current y position
           02F : 8146;  -- 	CALL NEG			;-Y
           030 : 1A96;  -- 	ADD Ft5				;5-Y
           031 : 1042;  -- 	STORE topMax		;max sensor reading for upper reflectors
           032 : 90C1;  -- 	IN YPOS				;reads current y position
           033 : 1A94;  -- 	ADD Ft3				;3+Y
           034 : 1043;  -- 	STORE bottomMax		;max sensor reading for upper reflectors
           035 : 90A8;  -- 	IN DIST0			;sensor reading of upper half
           036 : 2042;  -- 	SUB topMax			;subtract maximum distance top reflector could be
           037 : 307D;  -- 	JNEG upRefFound		;upper reflector found
           038 : 90AD;  -- 	IN DIST5			;sensor reading of lower half
           039 : 2043;  -- 	SUB bottomMax		;subtract maximum distance bottom reflector could be
           03A : 3086;  -- 	JNEG downRefFound	;lower reflector found
           03B : 90AA;  -- 	IN DIST2			;read sonar 2
           03C : 2293;  -- 	SUB Ft2				;subtract 2 ft
           03D : 3044;  -- 	JNEG UpRefAvoid		;kill robot if obstacle too close
           03E : 90AB;  -- 	IN DIST3			;read sonar 3
           03F : 2293;  -- 	SUB Ft2 			;subtract 2ft
           040 : 3057;  -- 	JNEG DownRefAvoid	;kill robot if obstacle too close
           041 : 2835;  -- 	JUMP CheckVertical	;Loop if nothing is detected in front of bot
           042 : 0296;  -- topMax: DW Ft5
           043 : 0294;  -- bottomMax: DW Ft3
           044 : 0A7B;  -- 	LOAD Zero			;Load zero for velocity
           045 : 10FD;  -- 	STORE DVel			;store velocity as zero
           046 : 90C2;  -- 	IN Theta			;read theta value
           047 : 6FA6;  -- 	ADDI -90			;subtract 90
           048 : 10FC;  -- 	STORE DTheta		;store as desired angle
           049 : 806A;  -- 	CALL TurnCW90Loop   ;call function that turns bot 90deg CW
           04A : 0A9E;  -- 	LOAD FMid			;Load zero for velocity
           04B : 10FD;  -- 	STORE DVel			;store velocity as zero		
           04C : 90C1;  -- 	IN YPos				;read current y coord
           04D : 2292;  -- 	SUB Ft1				;subtract 1ft
           04E : 107C;  -- 	STORE Ydest			;store y destination	
           04F : 8074;  -- 	CALL DodgeDown		;call function that moves bot 1ft
           050 : 0A7B;  -- 	LOAD Zero			;Load zero for velocity
           051 : 10FD;  -- 	STORE DVel			;store velocity as zero
           052 : 90C2;  -- 	IN Theta			;read theta value
           053 : 685A;  -- 	ADDI 90				;add 90deg
           054 : 10FC;  -- 	STORE DTheta		;store as desired angle
           055 : 806F;  -- 	CALL TurnCCW90Loop  ;call function that turns bot 90deg CCW
           056 : 282C;  -- 	JUMP InitSpeed		;continues with move forward function
           057 : 0A7B;  -- 	LOAD Zero			;Load zero for velocity
           058 : 10FD;  -- 	STORE DVel			;store velocity as zero
           059 : 90C2;  -- 	IN Theta			;read theta value
           05A : 685A;  -- 	ADDI 90				;add 90
           05B : 10FC;  -- 	STORE DTheta		;store as desired angle
           05C : 806F;  -- 	CALL TurnCCW90Loop  ;call function that turns bot 90deg CCW
           05D : 0A9E;  -- 	LOAD FMid			;Load zero for velocity
           05E : 10FD;  -- 	STORE DVel			;store velocity as zero		
           05F : 90C1;  -- 	IN YPos				;read current y coord
           060 : 1A92;  -- 	ADD Ft1				;add 1ft
           061 : 107C;  -- 	STORE Ydest			;store y destination	
           062 : 8078;  -- 	CALL DodgeUp		;call function that moves bot 1ft
           063 : 0A7B;  -- 	LOAD Zero			;Load zero for velocity
           064 : 10FD;  -- 	STORE DVel			;store velocity as zero
           065 : 90C2;  -- 	IN Theta			;read theta value
           066 : 6FA6;  -- 	ADDI -90			;subtract 90deg
           067 : 10FC;  -- 	STORE DTheta		;store as desired angle
           068 : 806A;  -- 	CALL TurnCW90Loop   ;call function that turns bot 90deg CW
           069 : 282C;  -- 	JUMP InitSpeed		;continues with move forward function	
           06A : 812B;  -- 	CALL   GetThetaErr	;gets the difference between Theta and DTheta
           06B : 8145;  -- 	CALL   Abs         	;get abs(currentAngle - 90)
           06C : 6FFD;  -- 	ADDI   -3			;Error within 3deg
           06D : 386A;  -- 	JPOS   TurnCW90Loop ;if angle error > 3, keep checking
           06E : 8800;  -- 	RETURN
           06F : 812B;  -- 	CALL GetThetaErr	;gets the difference between Theta and DTheta
           070 : 8145;  -- 	CALL Abs         	;get abs(currentAngle - 90)
           071 : 6FFD;  -- 	ADDI -3				;Error within 3deg
           072 : 386F;  -- 	JPOS TurnCCW90Loop 	;if angle error > 3, keep checking
           073 : 8800;  -- 	RETURN
           074 : 90C1;  -- 	IN YPos				;Reads current yPos
           075 : 207C;  -- 	SUB Ydest			;Subtracts desired yPos
           076 : 3874;  -- 	JPOS DodgeDown		;Loops until yPos has moved to yDest
           077 : 8800;  -- 	RETURN
           078 : 90C1;  -- 	IN YPos				;Reads current yPos
           079 : 207C;  -- 	SUB Ydest			;Subtracts desired yPos
           07A : 3078;  -- 	JNEG DodgeUp		;Loops until yPos has moved to yDest
           07B : 8800;  -- 	RETURN
           07C : 0000;  -- Ydest: DW 0
           07D : 0A7B;  -- 	LOAD Zero			;Load zero for velocity
           07E : 10FD;  -- 	STORE DVel			;store velocity as zero
           07F : 90C2;  -- 	IN Theta			;read theta value
           080 : 685A;  -- 	ADDI 90				;add 90
           081 : 10FC;  -- 	STORE DTheta		;store as desired angle
           082 : 806F;  -- 	CALL TurnCCW90Loop  ;call function that turns bot 90deg CCW
           083 : 0A9E;  -- 	LOAD	FMid
           084 : 10FD;  -- 	STORE	DVel
           085 : 288F;  -- 	JUMP	DETECTREF
           086 : 0A7B;  -- 	LOAD Zero			;Load zero for velocity
           087 : 10FD;  -- 	STORE DVel			;store velocity as zero
           088 : 90C2;  -- 	IN Theta			;read theta value
           089 : 6FA6;  -- 	ADDI -90			;subtract 90deg
           08A : 10FC;  -- 	STORE DTheta		;store as desired angle
           08B : 806A;  -- 	CALL TurnCW90Loop   ;call function that turns bot 90deg CW
           08C : 0A9E;  -- 	LOAD	FMid
           08D : 10FD;  -- 	STORE	DVel
           08E : 288F;  -- 	JUMP	DETECTREF
           08F : B80C;  -- 	LOADI	12
           090 : 10EF;  -- 	STORE	TURNANGLE
           091 : 0A86;  -- 	LOAD	Mask0
           092 : 10B2;  -- 	STORE	SONAREN
           093 : 08A8;  -- 	LOAD	DIST0
           094 : 2294;  -- 	SUB		Ft3
           095 : 40A8;  -- 	JZERO	FACEREF
           096 : 30A8;  -- 	JNEG	FACEREF
           097 : BFF4;  -- 	LOADI	-12
           098 : 10EF;  -- 	STORE	TURNANGLE
           099 : 0A88;  -- 	LOAD	Mask2
           09A : 10B2;  -- 	STORE	SONAREN
           09B : 08AA;  -- 	LOAD	DIST2
           09C : 2294;  -- 	SUB		Ft3
           09D : 40A8;  -- 	JZERO	FACEREF
           09E : 30A8;  -- 	JNEG	FACEREF
           09F : BFF4;  -- 	LOADI	-12
           0A0 : 10EF;  -- 	STORE	TURNANGLE
           0A1 : 0A8B;  -- 	LOAD	Mask5
           0A2 : 10B2;  -- 	STORE	SONAREN
           0A3 : 08AB;  -- 	LOAD	DIST3
           0A4 : 2294;  -- 	SUB		Ft3
           0A5 : 40A8;  -- 	JZERO	FACEREF
           0A6 : 30A8;  -- 	JNEG	FACEREF
           0A7 : 288F;  -- 	JUMP	DETECTREF
           0A8 : 0A7B;  -- 	LOAD	Zero	;STOP MOTION OF BOT
           0A9 : 10FD;  -- 	STORE	DVel
           0AA : 0A88;  -- 	LOAD	Mask2	;ENABLE SENSOR NO. 2
           0AB : 98B2;  -- 	OUT		SONAREN
           0AC : 0A7B;  -- 	LOAD	Zero
           0AD : 9802;  -- 	OUT		TIMER
           0AE : 90AA;  -- 	IN		DIST2	;CHECK IF SENSOR IS 3 FT AWAY FROM OBJECT; IF IT IS,
           0AF : 2294;  -- 	SUB		Ft3		;THEN JUMP TO MOVEFORWARD SUBROUTINE; OTHERWISE FALL THROUGH
           0B0 : 30B6;  -- 	JNEG	STOPANDCHECK
           0B1 : 40B6;  -- 	JZERO	STOPANDCHECK
           0B2 : 90C2;  -- 	IN		THETA	;ROTATE 5 DEGREES CLOCKWISE
           0B3 : 6FF4;  -- 	ADDI	-12
           0B4 : 10FC;  -- 	STORE	DTheta
           0B5 : 28A8;  -- 	JUMP	FACEREF	;RESTART SUBROUTINE UNTIL SENSOR IS ALIGNED WITH REFLECTOR
           0B6 : 0A7B;  -- 	LOAD	Zero
           0B7 : 10FD;  -- 	STORE	DVel
           0B8 : 80C1;  -- 	CALL	DISTCHECK
           0B9 : 28BA;  -- 	JUMP	MOVEFORWARD
           0BA : 0A9C;  -- 	LOAD	FSlow
           0BB : 6832;  -- 	ADDI	50		;MOVE FORWARD AT MEDIUM-SLOW SPEED
           0BC : 10FD;  -- 	STORE	DVel
           0BD : 9002;  -- 	IN		TIMER
           0BE : 6FF6;  -- 	ADDI	-10
           0BF : 38C6;  -- 	JPOS	ROTATE
           0C0 : 28BA;  -- 	JUMP	MOVEFORWARD
           0C1 : 90AA;  -- 	IN		DIST2	;LOAD DISTANCE GIVEN BY SENSOR NO. 2
           0C2 : 6E48;  -- 	ADDI	-440	;CHECK IF APPROXIMATELY 1.5 FEET AWAY FROM REFLECTOR
           0C3 : 40D7;  -- 	JZERO	FINALDIST
           0C4 : 30D7;  -- 	JNEG	FINALDIST
           0C5 : 8800;  -- 	RETURN
           0C6 : 0A88;  -- 	LOAD	Mask2	;ENABLE SENSOR NO. 2
           0C7 : 98B2;  -- 	OUT		SONAREN
           0C8 : 0A7B;  -- 	LOAD	Zero
           0C9 : 10FD;  -- 	STORE	DVel
           0CA : 90C2;  -- 	IN		THETA	;TURN 36 DEGREES CLOCKWISE TO ALIGN SENSOR NO. 2 WITH REFLECTOR
           0CB : 6824;  -- 	ADDI	36
           0CC : 10FC;  -- 	STORE	DTheta
           0CD : 80C1;  -- 	CALL	DISTCHECK
           0CE : 823F;  -- 	CALL	WAIT1
           0CF : 28D0;  -- 	JUMP	ROTCOR
           0D0 : 90C2;  -- 	IN		THETA	;TURN 36 DEGREES COUNTER CLOCKWISE TO ALIGN FORWARD WITH REFLECTOR
           0D1 : 6FDC;  -- 	ADDI	-36
           0D2 : 10FC;  -- 	STORE	DTheta
           0D3 : 80C1;  -- 	CALL	DISTCHECK
           0D4 : 0A7B;  -- 	LOAD	Zero
           0D5 : 9802;  -- 	OUT		TIMER
           0D6 : 28BA;  -- 	JUMP	MOVEFORWARD
           0D7 : 90AA;  -- 	IN		DIST2
           0D8 : 6ED4;  -- 	ADDI	-300
           0D9 : 30DB;  -- 	JNEG	REVERSE
           0DA : 38DE;  -- 	JPOS	PERPALIGN
           0DB : BFB5;  -- 	LOADI	-75
           0DC : 10FD;  -- 	STORE	DVel
           0DD : 28D7;  -- 	JUMP	FINALDIST
           0DE : 0A7B;  -- 	LOAD	Zero
           0DF : 10FD;  -- 	STORE	DVel	
           0E0 : 0A8B;  -- 	LOAD	Mask5	;TURN ON SENSOR NO. 5
           0E1 : 98B2;  -- 	OUT		SONAREN
           0E2 : 90C2;  -- 	IN		THETA	;ROTATE 24 DEGREES CLOCKWISE
           0E3 : 6818;  -- 	ADDI	24
           0E4 : 10FC;  -- 	STORE	DTheta
           0E5 : 90AD;  -- 	IN		DIST5;
           0E6 : 6E2A;  -- 	ADDI	-470
           0E7 : 30EA;  -- 	JNEG	STOP
           0E8 : 40EA;  -- 	JZERO	STOP
           0E9 : 28DE;  -- 	JUMP	PERPALIGN	
           0EA : 0A7B;  -- 	LOAD	Zero	;STOPGAP: STOP BOT
           0EB : 10FD;  -- 	STORE	DVel
           0EC : 0A8B;  -- 	LOAD	Mask5	;TURN ON SENSOR NO. 5
           0ED : 98B2;  -- 	OUT		SONAREN
           0EE : 28F1;  -- 	JUMP	Die ;JUMP StartCircle
           0EF : 0000;  -- TURNANGLE:	DW	0
           0F0 : 28F0;  -- 	JUMP   InfLoop
           0F1 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           0F2 : 0A7B;  -- 	LOAD   Zero        ; Stop everything.
           0F3 : 9883;  -- 	OUT    LVELCMD
           0F4 : 988B;  -- 	OUT    RVELCMD
           0F5 : 98B2;  -- 	OUT    SONAREN
           0F6 : 08F9;  -- 	LOAD   DEAD        ; An indication that we are dead
           0F7 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           0F8 : 28F8;  -- 	JUMP   Forever     ; Do this forever.
           0F9 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           0FA : 80FE;  -- 	CALL   ControlMovement
           0FB : B000;  -- 	RETI   ; return from ISR
           0FC : 0000;  -- DTheta:    DW 0
           0FD : 0000;  -- DVel:      DW 0
           0FE : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           0FF : 113E;  -- 	STORE  MaxVal
           100 : 812B;  -- 	CALL   GetThetaErr ; get the heading error
           101 : 6002;  -- 	SHIFT  2
           102 : 1128;  -- 	STORE  CMAErr      ; hold temporarily
           103 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           104 : 8132;  -- 	CALL   CapValue    ; get a +/- max of 50
           105 : 1928;  -- 	ADD    CMAErr
           106 : 1128;  -- 	STORE  CMAErr      ; now contains a desired differential
           107 : B9FE;  -- 	LOADI  510
           108 : 113E;  -- 	STORE  MaxVal
           109 : 08FD;  -- 	LOAD   DVel
           10A : 8132;  -- 	CALL   CapValue    ; ensure velocity is valid
           10B : 10FD;  -- 	STORE  DVel        ; overwrite any invalid input
           10C : 1928;  -- 	ADD    CMAErr
           10D : 8132;  -- 	CALL   CapValue    ; ensure velocity is valid
           10E : 112A;  -- 	STORE  CMAR
           10F : 0928;  -- 	LOAD   CMAErr
           110 : 8146;  -- 	CALL   Neg         ; left wheel gets negative differential
           111 : 18FD;  -- 	ADD    DVel
           112 : 8132;  -- 	CALL   CapValue
           113 : 1129;  -- 	STORE  CMAL
           114 : 0928;  -- 	LOAD   CMAErr
           115 : 6001;  -- 	SHIFT  1           ; double the differential
           116 : 1128;  -- 	STORE  CMAErr
           117 : 092A;  -- 	LOAD   CMAR
           118 : 2129;  -- 	SUB    CMAL        ; calculate the actual differential
           119 : 2128;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           11A : 4123;  -- 	JZERO  CMADone
           11B : 1128;  -- 	STORE  CMAErr      ; the missing part
           11C : 1929;  -- 	ADD    CMAL
           11D : 8132;  -- 	CALL   CapValue
           11E : 1129;  -- 	STORE  CMAL
           11F : 092A;  -- 	LOAD   CMAR
           120 : 2128;  -- 	SUB    CMAErr
           121 : 8132;  -- 	CALL   CapValue
           122 : 112A;  -- 	STORE  CMAR
           123 : 0929;  -- 	LOAD   CMAL
           124 : 9883;  -- 	OUT    LVELCMD
           125 : 092A;  -- 	LOAD   CMAR
           126 : 988B;  -- 	OUT    RVELCMD
           127 : 8800;  -- 	RETURN
           128 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           129 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           12A : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           12B : 90C2;  -- 	IN     THETA
           12C : 20FC;  -- 	SUB    DTheta      ; actual - desired angle
           12D : 8146;  -- 	CALL   Neg         ; desired - actual angle
           12E : 68B4;  -- 	ADDI   180
           12F : 813F;  -- 	CALL   Mod360
           130 : 6F4C;  -- 	ADDI   -180
           131 : 8800;  -- 	RETURN
           132 : 213E;  -- 	SUB     MaxVal
           133 : 3939;  -- 	JPOS    CapVelHigh
           134 : 193E;  -- 	ADD     MaxVal
           135 : 193E;  -- 	ADD     MaxVal
           136 : 313B;  -- 	JNEG    CapVelLow
           137 : 213E;  -- 	SUB     MaxVal
           138 : 8800;  -- 	RETURN
           139 : 093E;  -- 	LOAD    MaxVal
           13A : 8800;  -- 	RETURN
           13B : 093E;  -- 	LOAD    MaxVal
           13C : 8146;  -- 	CALL    Neg
           13D : 8800;  -- 	RETURN
           13E : 01FE;  -- 	MaxVal: DW 510
           13F : 3142;  -- 	JNEG   M360N
           140 : 6E98;  -- 	ADDI   -360
           141 : 293F;  -- 	JUMP   Mod360
           142 : 6968;  -- 	ADDI   360
           143 : 3142;  -- 	JNEG   M360N
           144 : 8800;  -- 	RETURN
           145 : 3948;  -- 	JPOS   Abs_r
           146 : 5A7A;  -- 	XOR    NegOne       ; Flip all bits
           147 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           148 : 8800;  -- 	RETURN
           149 : 09A9;  -- 	LOAD   AtanY
           14A : 8145;  -- 	CALL   Abs          ; abs(y)
           14B : 11AB;  -- 	STORE  AtanT
           14C : 09A8;  -- 	LOAD   AtanX        ; abs(x)
           14D : 8145;  -- 	CALL   Abs
           14E : 21AB;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           14F : 315A;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           150 : 09A8;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           151 : 3157;  -- 	JNEG   A2_R3
           152 : 8169;  -- 	CALL   A2_calc      ; Octants 1, 8
           153 : 3155;  -- 	JNEG   A2_R1n
           154 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           155 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           156 : 8800;  -- 	RETURN
           157 : 8169;  -- 	CALL   A2_calc      ; Octants 4, 5            
           158 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           159 : 8800;  -- 	RETURN
           15A : 09A9;  -- 	LOAD   AtanY        ; Swap input arguments
           15B : 11AB;  -- 	STORE  AtanT
           15C : 09A8;  -- 	LOAD   AtanX
           15D : 11A9;  -- 	STORE  AtanY
           15E : 09AB;  -- 	LOAD   AtanT
           15F : 11A8;  -- 	STORE  AtanX
           160 : 3965;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           161 : 8169;  -- 	CALL   A2_calc      ; else octants 6, 7
           162 : 8146;  -- 	CALL   Neg          ; Negatge the number
           163 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           164 : 8800;  -- 	RETURN
           165 : 8169;  -- 	CALL   A2_calc      ; Octants 2, 3
           166 : 8146;  -- 	CALL   Neg          ; negate the angle
           167 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           168 : 8800;  -- 	RETURN
           169 : 09A9;  -- 	LOAD   AtanY
           16A : 1208;  -- 	STORE  d16sN        ; Y in numerator
           16B : 09A8;  -- 	LOAD   AtanX
           16C : 1209;  -- 	STORE  d16sD        ; X in denominator
           16D : 8195;  -- 	CALL   A2_div       ; divide
           16E : 0A0E;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           16F : 11AA;  -- 	STORE  AtanRatio
           170 : 11D1;  -- 	STORE  m16sA
           171 : 11D2;  -- 	STORE  m16sB
           172 : 818C;  -- 	CALL   A2_mult      ; X^2
           173 : 11D1;  -- 	STORE  m16sA
           174 : 09AC;  -- 	LOAD   A2c
           175 : 11D2;  -- 	STORE  m16sB
           176 : 818C;  -- 	CALL   A2_mult
           177 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           178 : 1209;  -- 	STORE  d16sD
           179 : 09AA;  -- 	LOAD   AtanRatio
           17A : 1208;  -- 	STORE  d16sN        ; Ratio in numerator
           17B : 8195;  -- 	CALL   A2_div       ; divide
           17C : 0A0E;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           17D : 11D1;  -- 	STORE  m16sA        ; <= result in radians
           17E : 09AD;  -- 	LOAD   A2cd         ; degree conversion factor
           17F : 11D2;  -- 	STORE  m16sB
           180 : 818C;  -- 	CALL   A2_mult      ; convert to degrees
           181 : 11AB;  -- 	STORE  AtanT
           182 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           183 : 4A7C;  -- 	AND    One
           184 : 4189;  -- 	JZERO  A2_rdwn      ; round down
           185 : 09AB;  -- 	LOAD   AtanT
           186 : 6018;  -- 	SHIFT  -8
           187 : 6801;  -- 	ADDI   1            ; round up
           188 : 8800;  -- 	RETURN
           189 : 09AB;  -- 	LOAD   AtanT
           18A : 6018;  -- 	SHIFT  -8           ; round down
           18B : 8800;  -- 	RETURN
           18C : 81AE;  -- 	CALL   Mult16s
           18D : 09D6;  -- 	LOAD   mres16sH
           18E : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           18F : 11D6;  -- 	STORE  mres16sH
           190 : 09D5;  -- 	LOAD   mres16sL
           191 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           192 : 4A8E;  -- 	AND    LowByte
           193 : 51D6;  -- 	OR     mres16sH     ; combine high and low words of result
           194 : 8800;  -- 	RETURN
           195 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           196 : 11AB;  -- 	STORE  AtanT
           197 : 09AB;  -- 	LOAD   AtanT
           198 : 6FFF;  -- 	ADDI   -1
           199 : 399C;  -- 	JPOS   A2_DN        ; not done; continue shifting
           19A : 81D7;  -- 	CALL   Div16s       ; do the standard division
           19B : 8800;  -- 	RETURN
           19C : 11AB;  -- 	STORE  AtanT
           19D : 0A08;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           19E : 6001;  -- 	SHIFT  1
           19F : 5A08;  -- 	XOR    d16sN        ; if the sign changed,
           1A0 : 31A4;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1A1 : 5A08;  -- 	XOR    d16sN        ; get back shifted version
           1A2 : 1208;  -- 	STORE  d16sN
           1A3 : 2997;  -- 	JUMP   A2_DL
           1A4 : 0A09;  -- 	LOAD   d16sD
           1A5 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1A6 : 1209;  -- 	STORE  d16sD
           1A7 : 2997;  -- 	JUMP   A2_DL
           1A8 : 0000;  -- AtanX:      DW 0
           1A9 : 0000;  -- AtanY:      DW 0
           1AA : 0000;  -- AtanRatio:  DW 0        ; =y/x
           1AB : 0000;  -- AtanT:      DW 0        ; temporary value
           1AC : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           1AD : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           1AE : B800;  -- 	LOADI  0
           1AF : 11D3;  -- 	STORE  m16sc        ; clear carry
           1B0 : 11D6;  -- 	STORE  mres16sH     ; clear result
           1B1 : B810;  -- 	LOADI  16           ; load 16 to counter
           1B2 : 11D4;  -- 	STORE  mcnt16s      
           1B3 : 09D3;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           1B4 : 41B8;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           1B5 : 09D6;  -- 	LOAD   mres16sH     ; if a carry, 
           1B6 : 19D1;  -- 	ADD    m16sA        ;  add multiplicand to result H
           1B7 : 11D6;  -- 	STORE  mres16sH
           1B8 : 09D2;  -- 	LOAD   m16sB
           1B9 : 4A7C;  -- 	AND    One          ; check bit 0 of multiplier
           1BA : 11D3;  -- 	STORE  m16sc        ; save as next carry
           1BB : 41BF;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           1BC : 09D6;  -- 	LOAD   mres16sH     ; if bit 0 set,
           1BD : 21D1;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           1BE : 11D6;  -- 	STORE  mres16sH
           1BF : 09D2;  -- 	LOAD   m16sB
           1C0 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1C1 : 49D0;  -- 	AND    c7FFF        ; clear msb
           1C2 : 11D2;  -- 	STORE  m16sB
           1C3 : 09D6;  -- 	LOAD   mres16sH     ; load result H
           1C4 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1C5 : 51D2;  -- 	OR     m16sB
           1C6 : 11D2;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1C7 : 09D6;  -- 	LOAD   mres16sH
           1C8 : 6011;  -- 	SHIFT  -1
           1C9 : 11D6;  -- 	STORE  mres16sH     ; shift result H >>1
           1CA : 09D4;  -- 	LOAD   mcnt16s
           1CB : 6FFF;  -- 	ADDI   -1           ; check counter
           1CC : 39B2;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1CD : 09D2;  -- 	LOAD   m16sB
           1CE : 11D5;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1CF : 8800;  -- 	RETURN              ; Done
           1D0 : 7FFF;  -- c7FFF: DW &H7FFF
           1D1 : 0000;  -- m16sA: DW 0 ; multiplicand
           1D2 : 0000;  -- m16sB: DW 0 ; multipler
           1D3 : 0000;  -- m16sc: DW 0 ; carry
           1D4 : 0000;  -- mcnt16s: DW 0 ; counter
           1D5 : 0000;  -- mres16sL: DW 0 ; result low
           1D6 : 0000;  -- mres16sH: DW 0 ; result high
           1D7 : B800;  -- 	LOADI  0
           1D8 : 120F;  -- 	STORE  dres16sR     ; clear remainder result
           1D9 : 120C;  -- 	STORE  d16sC1       ; clear carry
           1DA : 0A08;  -- 	LOAD   d16sN
           1DB : 5A09;  -- 	XOR    d16sD
           1DC : 120A;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1DD : B811;  -- 	LOADI  17
           1DE : 120B;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1DF : 0A09;  -- 	LOAD   d16sD
           1E0 : 8145;  -- 	CALL   Abs          ; take absolute value of denominator
           1E1 : 1209;  -- 	STORE  d16sD
           1E2 : 0A08;  -- 	LOAD   d16sN
           1E3 : 8145;  -- 	CALL   Abs          ; take absolute value of numerator
           1E4 : 1208;  -- 	STORE  d16sN
           1E5 : 0A08;  -- 	LOAD   d16sN
           1E6 : 601F;  -- 	SHIFT  -15          ; get msb
           1E7 : 4A7C;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1E8 : 120D;  -- 	STORE  d16sC2       ; store as carry
           1E9 : 0A08;  -- 	LOAD   d16sN
           1EA : 6001;  -- 	SHIFT  1            ; shift <<1
           1EB : 520C;  -- 	OR     d16sC1       ; with carry
           1EC : 1208;  -- 	STORE  d16sN
           1ED : 0A0B;  -- 	LOAD   d16sT
           1EE : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1EF : 41FF;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1F0 : 120B;  -- 	STORE  d16sT
           1F1 : 0A0F;  -- 	LOAD   dres16sR
           1F2 : 6001;  -- 	SHIFT  1            ; shift remainder
           1F3 : 520D;  -- 	OR     d16sC2       ; with carry from other shift
           1F4 : 2209;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1F5 : 31FA;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1F6 : 120F;  -- 	STORE  dres16sR
           1F7 : B801;  -- 	LOADI  1
           1F8 : 120C;  -- 	STORE  d16sC1       ; set carry
           1F9 : 29E5;  -- 	JUMP   Div16s_loop
           1FA : 1A09;  -- 	ADD    d16sD        ; add denominator back in
           1FB : 120F;  -- 	STORE  dres16sR
           1FC : B800;  -- 	LOADI  0
           1FD : 120C;  -- 	STORE  d16sC1       ; clear carry
           1FE : 29E5;  -- 	JUMP   Div16s_loop
           1FF : 0A08;  -- 	LOAD   d16sN
           200 : 120E;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           201 : 0A0A;  -- 	LOAD   d16sS        ; check the sign indicator
           202 : 3204;  -- 	JNEG   Div16s_neg
           203 : 8800;  -- 	RETURN
           204 : 0A0E;  -- 	LOAD   dres16sQ     ; need to negate the result
           205 : 8146;  -- 	CALL   Neg
           206 : 120E;  -- 	STORE  dres16sQ
           207 : 8800;  -- 	RETURN	
           208 : 0000;  -- d16sN: DW 0 ; numerator
           209 : 0000;  -- d16sD: DW 0 ; denominator
           20A : 0000;  -- d16sS: DW 0 ; sign value
           20B : 0000;  -- d16sT: DW 0 ; temp counter
           20C : 0000;  -- d16sC1: DW 0 ; carry value
           20D : 0000;  -- d16sC2: DW 0 ; carry value
           20E : 0000;  -- dres16sQ: DW 0 ; quotient result
           20F : 0000;  -- dres16sR: DW 0 ; remainder result
           210 : 0A3A;  -- 	LOAD   L2X
           211 : 8145;  -- 	CALL   Abs
           212 : 123C;  -- 	STORE  L2T1
           213 : 0A3B;  -- 	LOAD   L2Y
           214 : 8145;  -- 	CALL   Abs
           215 : 223C;  -- 	SUB    L2T1
           216 : 3232;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           217 : 1A3C;  -- 	ADD    L2T1
           218 : 11D1;  -- 	STORE  m16sa
           219 : B8F6;  -- 	LOADI  246       ; max * 246
           21A : 11D2;  -- 	STORE  m16sB
           21B : 81AE;  -- 	CALL   Mult16s
           21C : 09D6;  -- 	LOAD   mres16sH
           21D : 6008;  -- 	SHIFT  8
           21E : 123D;  -- 	STORE  L2T2
           21F : 09D5;  -- 	LOAD   mres16sL
           220 : 6018;  -- 	SHIFT  -8        ; / 256
           221 : 4A8E;  -- 	AND    LowByte
           222 : 523D;  -- 	OR     L2T2
           223 : 123E;  -- 	STORE  L2T3
           224 : 0A3C;  -- 	LOAD   L2T1
           225 : 11D1;  -- 	STORE  m16sa
           226 : B868;  -- 	LOADI  104       ; min * 104
           227 : 11D2;  -- 	STORE  m16sB
           228 : 81AE;  -- 	CALL   Mult16s
           229 : 09D6;  -- 	LOAD   mres16sH
           22A : 6008;  -- 	SHIFT  8
           22B : 123D;  -- 	STORE  L2T2
           22C : 09D5;  -- 	LOAD   mres16sL
           22D : 6018;  -- 	SHIFT  -8        ; / 256
           22E : 4A8E;  -- 	AND    LowByte
           22F : 523D;  -- 	OR     L2T2
           230 : 1A3E;  -- 	ADD    L2T3     ; sum
           231 : 8800;  -- 	RETURN
           232 : 1A3C;  -- 	ADD    L2T1
           233 : 123D;  -- 	STORE  L2T2
           234 : 0A3C;  -- 	LOAD   L2T1
           235 : 123E;  -- 	STORE  L2T3
           236 : 0A3D;  -- 	LOAD   L2T2
           237 : 123C;  -- 	STORE  L2T1
           238 : 0A3E;  -- 	LOAD   L2T3
           239 : 2A18;  -- 	JUMP   CalcDist
           23A : 0000;  -- L2X:  DW 0
           23B : 0000;  -- L2Y:  DW 0
           23C : 0000;  -- L2T1: DW 0
           23D : 0000;  -- L2T2: DW 0
           23E : 0000;  -- L2T3: DW 0
           23F : 9802;  -- 	OUT    TIMER
           240 : 9002;  -- 	IN     TIMER
           241 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           242 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           243 : 3240;  -- 	JNEG   Wloop
           244 : 8800;  -- 	RETURN
           245 : 825D;  -- 	CALL   GetBattLvl
           246 : 4245;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           247 : 22A2;  -- 	SUB    MinBatt
           248 : 324B;  -- 	JNEG   DeadBatt
           249 : 1AA2;  -- 	ADD    MinBatt     ; get original value back
           24A : 8800;  -- 	RETURN
           24B : B820;  -- 	LOADI  &H20
           24C : 980A;  -- 	OUT    BEEP        ; start beep sound
           24D : 825D;  -- 	CALL   GetBattLvl  ; get the battery level
           24E : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           24F : 9805;  -- 	OUT    SSEG2
           250 : 9806;  -- 	OUT    LCD
           251 : 0A7B;  -- 	LOAD   Zero
           252 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           253 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           254 : 9807;  -- 	OUT    XLEDS
           255 : 823F;  -- 	CALL   Wait1       ; 1 second
           256 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           257 : 980A;  -- 	OUT    BEEP        ; stop beeping
           258 : 0A7B;  -- 	LOAD   Zero
           259 : 9801;  -- 	OUT    LEDS        ; LEDs off
           25A : 9807;  -- 	OUT    XLEDS
           25B : 823F;  -- 	CALL   Wait1       ; 1 second
           25C : 2A4B;  -- 	JUMP   DeadBatt    ; repeat forever
           25D : 0AA4;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           25E : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           25F : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           260 : 826B;  -- 	CALL   BlockI2C    ; wait for it to finish
           261 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           262 : 8800;  -- 	RETURN
           263 : 826B;  -- 	CALL   BlockI2C    ; wait for idle
           264 : 0AA3;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           265 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           266 : 0A7B;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           267 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           268 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           269 : 826B;  -- 	CALL   BlockI2C    ; wait for it to finish
           26A : 8800;  -- 	RETURN
           26B : 0A7B;  -- 	LOAD   Zero
           26C : 1279;  -- 	STORE  Temp        ; Used to check for timeout
           26D : 0A79;  -- 	LOAD   Temp
           26E : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           26F : 1279;  -- 	STORE  Temp
           270 : 4274;  -- 	JZERO  I2CError    ; Timeout occurred; error
           271 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           272 : 3A6D;  -- 	JPOS   BI2CL       ; If not 0, try again
           273 : 8800;  -- 	RETURN             ; Else return
           274 : 0A7B;  -- 	LOAD   Zero
           275 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           276 : 9804;  -- 	OUT    SSEG1
           277 : 9805;  -- 	OUT    SSEG2       ; display error message
           278 : 2A74;  -- 	JUMP   I2CError
           279 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           27A : FFFF;  -- NegOne:   DW -1
           27B : 0000;  -- Zero:     DW 0
           27C : 0001;  -- One:      DW 1
           27D : 0002;  -- Two:      DW 2
           27E : 0003;  -- Three:    DW 3
           27F : 0004;  -- Four:     DW 4
           280 : 0005;  -- Five:     DW 5
           281 : 0006;  -- Six:      DW 6
           282 : 0007;  -- Seven:    DW 7
           283 : 0008;  -- Eight:    DW 8
           284 : 0009;  -- Nine:     DW 9
           285 : 000A;  -- Ten:      DW 10
           286 : 0001;  -- Mask0:    DW &B00000001
           287 : 0002;  -- Mask1:    DW &B00000010
           288 : 0004;  -- Mask2:    DW &B00000100
           289 : 0008;  -- Mask3:    DW &B00001000
           28A : 0010;  -- Mask4:    DW &B00010000
           28B : 0020;  -- Mask5:    DW &B00100000
           28C : 0040;  -- Mask6:    DW &B01000000
           28D : 0080;  -- Mask7:    DW &B10000000
           28E : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           28F : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           290 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           291 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           292 : 0125;  -- Ft1:	  DW 293
           293 : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           294 : 036F;  -- Ft3:      DW 879
           295 : 0494;  -- Ft4:      DW 1172
           296 : 05B9;  -- Ft5:	  DW 1465
           297 : 0928;  -- Ft8:	  DW 2344
           298 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           299 : 00B4;  -- Deg180:   DW 180       ; 180
           29A : 010E;  -- Deg270:   DW 270       ; 270
           29B : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           29C : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           29D : FF9C;  -- RSlow:    DW -100
           29E : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           29F : FEA2;  -- RMid:     DW -350
           2A0 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           2A1 : FE0C;  -- RFast:    DW -500
           2A2 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           2A3 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           2A4 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           2A5 : 0000;  -- 	DW 0
  END;
